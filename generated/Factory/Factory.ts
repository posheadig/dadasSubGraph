// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class TokenCreated extends ethereum.Event {
  get params(): TokenCreated__Params {
    return new TokenCreated__Params(this);
  }
}

export class TokenCreated__Params {
  _event: TokenCreated;

  constructor(event: TokenCreated) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  computeAddress(kind: string, content: string, initCodeHash: Bytes): Address {
    let result = super.call(
      "computeAddress",
      "computeAddress(string,string,bytes32):(address)",
      [
        ethereum.Value.fromString(kind),
        ethereum.Value.fromString(content),
        ethereum.Value.fromFixedBytes(initCodeHash)
      ]
    );

    return result[0].toAddress();
  }

  try_computeAddress(
    kind: string,
    content: string,
    initCodeHash: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "computeAddress",
      "computeAddress(string,string,bytes32):(address)",
      [
        ethereum.Value.fromString(kind),
        ethereum.Value.fromString(content),
        ethereum.Value.fromFixedBytes(initCodeHash)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createToken(
    name: string,
    symbol: string,
    totalSupply: BigInt,
    owner: Address,
    kind: string,
    content: string
  ): Address {
    let result = super.call(
      "createToken",
      "createToken(string,string,uint256,address,string,string):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(totalSupply),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromString(kind),
        ethereum.Value.fromString(content)
      ]
    );

    return result[0].toAddress();
  }

  try_createToken(
    name: string,
    symbol: string,
    totalSupply: BigInt,
    owner: Address,
    kind: string,
    content: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createToken",
      "createToken(string,string,uint256,address,string,string):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(totalSupply),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromString(kind),
        ethereum.Value.fromString(content)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenCount(): BigInt {
    let result = super.call("getTokenCount", "getTokenCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTokenCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenCount",
      "getTokenCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokens(param0: BigInt): Address {
    let result = super.call("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_tokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("tokens", "tokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateTokenCall extends ethereum.Call {
  get inputs(): CreateTokenCall__Inputs {
    return new CreateTokenCall__Inputs(this);
  }

  get outputs(): CreateTokenCall__Outputs {
    return new CreateTokenCall__Outputs(this);
  }
}

export class CreateTokenCall__Inputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get totalSupply(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get owner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get kind(): string {
    return this._call.inputValues[4].value.toString();
  }

  get content(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class CreateTokenCall__Outputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
